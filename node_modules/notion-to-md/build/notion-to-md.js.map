{"version":3,"file":"notion-to-md.js","sourceRoot":"","sources":["../src/notion-to-md.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AASA,+CAAiC;AACjC,2CAAkD;AAElD;;GAEG;AACH,MAAa,gBAAgB;IAG3B,YAAY,OAAgC;QAC1C,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;IAC3C,CAAC;IAED;;;;;OAKG;IACH,gBAAgB,CAAC,WAAsB,EAAE,EAAE,eAAuB,CAAC;QACjE,IAAI,QAAQ,GAAG,EAAE,CAAC;QAClB,QAAQ,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YAC5B,IAAI,QAAQ,CAAC,MAAM,EAAE;gBACnB,QAAQ,IAAI;EAClB,EAAE,CAAC,WAAW,CAAC,QAAQ,CAAC,MAAM,EAAE,YAAY,CAAC;CAC9C,CAAC;aACK;YACD,IAAI,QAAQ,CAAC,QAAQ,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;gBACrD,QAAQ,IAAI,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,QAAQ,EAAE,YAAY,GAAG,CAAC,CAAC,CAAC;aACxE;QACH,CAAC,CAAC,CAAC;QACH,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,cAAc,CAClB,EAAU,EACV,YAA2B,IAAI;QAE/B,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,MAAM,IAAI,KAAK,CACb,wGAAwG,CACzG,CAAC;SACH;QAED,MAAM,MAAM,GAAG,MAAM,IAAA,yBAAgB,EAAC,IAAI,CAAC,YAAY,EAAE,EAAE,EAAE,SAAS,CAAC,CAAC;QAExE,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;QACvD,OAAO,UAAU,CAAC;IACpB,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,gBAAgB,CACpB,MAAyC,EACzC,YAA2B,IAAI,EAC/B,WAAsB,EAAE;QAExB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,MAAM,IAAI,KAAK,CACb,wGAAwG,CACzG,CAAC;SACH;QAED,IAAI,CAAC,MAAM;YAAE,OAAO,QAAQ,CAAC;QAE7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACtC,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YAEtB,IAAI,cAAc,IAAI,KAAK,IAAI,KAAK,CAAC,YAAY,EAAE;gBACjD,IAAI,YAAY,GAAG,MAAM,IAAA,yBAAgB,EACvC,IAAI,CAAC,YAAY,EACjB,KAAK,CAAC,EAAE,EACR,SAAS,CACV,CAAC;gBACF,QAAQ,CAAC,IAAI,CAAC;oBACZ,MAAM,EAAE,MAAM,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC;oBACzC,QAAQ,EAAE,EAAE;iBACb,CAAC,CAAC;gBAEH,IAAI,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC;gBACxB,MAAM,IAAI,CAAC,gBAAgB,CACzB,YAAY,EACZ,SAAS,EACT,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,CACzB,CAAC;gBACF,SAAS;aACV;YACD,IAAI,GAAG,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;YAE5C,QAAQ,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC;SAC9C;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,eAAe,CAAC,KAAsC;QAC1D,IAAI,CAAC,CAAC,MAAM,IAAI,KAAK,CAAC;YAAE,OAAO,EAAE,CAAC;QAElC,IAAI,UAAU,GAAG,EAAE,CAAC;QACpB,MAAM,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC;QACvB,0BAA0B;QAE1B,QAAQ,IAAI,EAAE;YACZ,KAAK,OAAO;gBACV;oBACE,IAAI,YAAY,GAAG,KAAK,CAAC,KAAK,CAAC;oBAC/B,MAAM,mBAAmB,GAAG,YAAY,CAAC,OAAO;yBAC7C,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC;yBAC9B,IAAI,CAAC,EAAE,CAAC,CAAC;oBACZ,MAAM,UAAU,GAAG,YAAY,CAAC,IAAI,CAAC;oBACrC,IAAI,UAAU,KAAK,UAAU;wBAC3B,OAAO,EAAE,CAAC,KAAK,CAAC,mBAAmB,EAAE,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;oBAClE,IAAI,UAAU,KAAK,MAAM;wBACvB,OAAO,EAAE,CAAC,KAAK,CAAC,mBAAmB,EAAE,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;iBAC/D;gBACD,MAAM;YAER,KAAK,SAAS,CAAC,CAAC;gBACd,OAAO,EAAE,CAAC,OAAO,EAAE,CAAC;aACrB;YAED,KAAK,UAAU,CAAC,CAAC;gBACf,OAAO,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;aAChD;YAED,KAAK,OAAO,CAAC;YACb,KAAK,MAAM,CAAC;YACZ,KAAK,KAAK;gBACR;oBACE,IAAI,YAAY,CAAC;oBACjB,IAAI,IAAI,KAAK,OAAO;wBAAE,YAAY,GAAG,KAAK,CAAC,KAAK,CAAC;oBACjD,IAAI,IAAI,KAAK,MAAM;wBAAE,YAAY,GAAG,KAAK,CAAC,IAAI,CAAC;oBAC/C,IAAI,IAAI,KAAK,KAAK;wBAAE,YAAY,GAAG,KAAK,CAAC,GAAG,CAAC;oBAC7C,IAAI,YAAY,EAAE;wBAChB,MAAM,SAAS,GAAG,YAAY,CAAC,IAAI,CAAC;wBACpC,IAAI,SAAS,KAAK,UAAU;4BAC1B,OAAO,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;wBACrD,IAAI,SAAS,KAAK,MAAM;4BACtB,OAAO,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;qBAClD;iBACF;gBACD,MAAM;YAER,KAAK,UAAU,CAAC;YAChB,KAAK,OAAO,CAAC;YACb,KAAK,cAAc;gBACjB;oBACE,IAAI,YAAY,CAAC;oBACjB,IAAI,IAAI,KAAK,UAAU;wBAAE,YAAY,GAAG,KAAK,CAAC,QAAQ,CAAC;oBACvD,IAAI,IAAI,KAAK,OAAO;wBAAE,YAAY,GAAG,KAAK,CAAC,KAAK,CAAC;oBACjD,IAAI,IAAI,KAAK,cAAc;wBAAE,YAAY,GAAG,KAAK,CAAC,YAAY,CAAC;oBAC/D,IAAI,YAAY;wBAAE,OAAO,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC;iBAC1D;gBACD,MAAM;YAER,KAAK,OAAO,CAAC,CAAC;gBACZ,MAAM,EAAE,EAAE,EAAE,YAAY,EAAE,GAAG,KAAK,CAAC;gBACnC,IAAI,QAAQ,GAAe,EAAE,CAAC;gBAC9B,IAAI,YAAY,EAAE;oBAChB,MAAM,SAAS,GAAG,MAAM,IAAA,yBAAgB,EAAC,IAAI,CAAC,YAAY,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC;oBACrE,gCAAgC;oBAChC,IAAI,WAAW,GAAG,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,GAAG,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;wBAC7C,MAAM,EAAE,IAAI,EAAE,GAAG,GAAU,CAAC;wBAC5B,MAAM,KAAK,GAAI,GAAW,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC;wBAE1C;;;;2BAIG;wBACH,IAAI,iBAAiB,GAAG,KAAK,CAAC,GAAG,CAC/B,KAAK,EAAE,IAAS,EAAE,EAAE,CAClB,MAAM,IAAI,CAAC,eAAe,CAAC;4BACzB,IAAI,EAAE,WAAW;4BACjB,SAAS,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE;yBACI,CAAC,CACxC,CAAC;wBAEF,MAAM,aAAa,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;wBAC3D,oCAAoC;wBACpC,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;wBAC7B,yBAAyB;oBAC3B,CAAC,CAAC,CAAC;oBACH,MAAM,OAAO,CAAC,GAAG,CAAC,WAAW,IAAI,EAAE,CAAC,CAAC;iBACtC;gBACD,UAAU,GAAG,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;gBAChC,OAAO,UAAU,CAAC;aACnB;YAED,oBAAoB;YACpB,cAAc;YACd,cAAc;YACd,cAAc;YACd,cAAc;YACd,uBAAuB;YACvB,uBAAuB;YACvB,UAAU;YACV,UAAU;YACV,WAAW;YACX,aAAa;YACb,iBAAiB;YACjB,eAAe;YACf,mBAAmB;YACnB,SAAS;YACT,YAAY;YACZ,eAAe;YACf,sBAAsB;YACtB,gBAAgB;YAChB,WAAW;YACX,iBAAiB;YACjB,UAAU;YACV,gBAAgB;YAEhB,OAAO,CAAC,CAAC;gBACP,4FAA4F;gBAE5F,aAAa;gBACb,IAAI,YAAY,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,SAAS,IAAI,EAAE,CAAC;gBACnE,YAAY,CAAC,GAAG,CAAC,CAAC,OAAa,EAAE,EAAE;oBACjC,MAAM,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;oBACxC,IAAI,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;oBAEpC,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;oBAE7D,IAAI,OAAO,CAAC,MAAM,CAAC;wBACjB,UAAU,GAAG,EAAE,CAAC,IAAI,CAAC,UAAU,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;oBAEpD,UAAU,IAAI,UAAU,CAAC;gBAC3B,CAAC,CAAC,CAAC;aACJ;SACF;QAED,QAAQ,IAAI,EAAE;YACZ,KAAK,MAAM;gBACT;oBACE,UAAU,GAAG,EAAE,CAAC,SAAS,CAAC,UAAU,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC;iBAC7D;gBACD,MAAM;YAER,KAAK,WAAW;gBACd;oBACE,UAAU,GAAG,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;iBACtC;gBACD,MAAM;YAER,KAAK,WAAW;gBACd;oBACE,UAAU,GAAG,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;iBACtC;gBACD,MAAM;YAER,KAAK,WAAW;gBACd;oBACE,UAAU,GAAG,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;iBACtC;gBACD,MAAM;YAER,KAAK,OAAO;gBACV;oBACE,UAAU,GAAG,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;iBACnC;gBACD,MAAM;YAER,KAAK,SAAS;gBACZ;oBACE,UAAU,GAAG,EAAE,CAAC,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;iBACvD;gBACD,MAAM;YAER,KAAK,oBAAoB,CAAC;YAC1B,KAAK,oBAAoB;gBACvB;oBACE,UAAU,GAAG,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;iBACpC;gBACD,MAAM;YAER,KAAK,OAAO;gBACV;oBACE,UAAU,GAAG,EAAE,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;iBACvD;gBACD,MAAM;SACT;QAED,OAAO,UAAU,CAAC;IACpB,CAAC;IAED;;;;;OAKG;IACH,iBAAiB,CAAC,IAAY,EAAE,WAAwB;QACtD,wCAAwC;QACxC,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;YAAE,OAAO,IAAI,CAAC;QAErC,MAAM,iBAAiB,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC/C,MAAM,kBAAkB,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAEhD,MAAM,aAAa,GAAG,iBAAiB,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACpE,MAAM,cAAc,GAAG,kBAAkB,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAEvE,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;QAEnB,IAAI,IAAI,KAAK,EAAE,EAAE;YACf,IAAI,WAAW,CAAC,IAAI;gBAAE,IAAI,GAAG,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YACjD,IAAI,WAAW,CAAC,IAAI;gBAAE,IAAI,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC3C,IAAI,WAAW,CAAC,MAAM;gBAAE,IAAI,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAC/C,IAAI,WAAW,CAAC,aAAa;gBAAE,IAAI,GAAG,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YAC7D,IAAI,WAAW,CAAC,SAAS;gBAAE,IAAI,GAAG,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;SACtD;QAED,OAAO,aAAa,GAAG,IAAI,GAAG,cAAc,CAAC;IAC/C,CAAC;CACF;AAnUD,4CAmUC","sourcesContent":["import { Client } from \"@notionhq/client\";\nimport {\n  Annotations,\n  ListBlockChildrenResponseResult,\n  ListBlockChildrenResponseResults,\n  MdBlock,\n  Text,\n  NotionToMarkdownOptions,\n} from \"./types\";\nimport * as md from \"./utils/md\";\nimport { getBlockChildren } from \"./utils/notion\";\n\n/**\n * Converts a Notion page to Markdown.\n */\nexport class NotionToMarkdown {\n  private notionClient: Client;\n\n  constructor(options: NotionToMarkdownOptions) {\n    this.notionClient = options.notionClient;\n  }\n\n  /**\n   * Converts Markdown Blocks to string\n   * @param {MdBlock[]} mdBlocks - Array of markdown blocks\n   * @param {number} nestingLevel - Defines max depth of nesting\n   * @returns {string} - Returns markdown string\n   */\n  toMarkdownString(mdBlocks: MdBlock[] = [], nestingLevel: number = 0): string {\n    let mdString = \"\";\n    mdBlocks.forEach((mdBlocks) => {\n      if (mdBlocks.parent) {\n        mdString += `\n${md.addTabSpace(mdBlocks.parent, nestingLevel)}\n`;\n      }\n      if (mdBlocks.children && mdBlocks.children.length > 0) {\n        mdString += this.toMarkdownString(mdBlocks.children, nestingLevel + 1);\n      }\n    });\n    return mdString;\n  }\n\n  /**\n   * Retrieves Notion Blocks based on ID and converts them to Markdown Blocks\n   * @param {string} id - notion page id (not database id)\n   * @param {number} totalPage - Retrieve block children request number, page_size Maximum = totalPage * 100 (Default=null)\n   * @returns {Promise<MdBlock[]>} - List of markdown blocks\n   */\n  async pageToMarkdown(\n    id: string,\n    totalPage: number | null = null\n  ): Promise<MdBlock[]> {\n    if (!this.notionClient) {\n      throw new Error(\n        \"notion client is not provided, for more details check out https://github.com/souvikinator/notion-to-md\"\n      );\n    }\n\n    const blocks = await getBlockChildren(this.notionClient, id, totalPage);\n\n    const parsedData = await this.blocksToMarkdown(blocks);\n    return parsedData;\n  }\n\n  /**\n   * Converts list of Notion Blocks to Markdown Blocks\n   * @param {ListBlockChildrenResponseResults | undefined} blocks - List of notion blocks\n   * @param {number} totalPage - Retrieve block children request number, page_size Maximum = totalPage * 100\n   * @param {MdBlock[]} mdBlocks - Defines max depth of nesting\n   * @returns {Promise<MdBlock[]>} - Array of markdown blocks with their children\n   */\n  async blocksToMarkdown(\n    blocks?: ListBlockChildrenResponseResults,\n    totalPage: number | null = null,\n    mdBlocks: MdBlock[] = []\n  ): Promise<MdBlock[]> {\n    if (!this.notionClient) {\n      throw new Error(\n        \"notion client is not provided, for more details check out https://github.com/souvikinator/notion-to-md\"\n      );\n    }\n\n    if (!blocks) return mdBlocks;\n\n    for (let i = 0; i < blocks.length; i++) {\n      let block = blocks[i];\n\n      if (\"has_children\" in block && block.has_children) {\n        let child_blocks = await getBlockChildren(\n          this.notionClient,\n          block.id,\n          totalPage\n        );\n        mdBlocks.push({\n          parent: await this.blockToMarkdown(block),\n          children: [],\n        });\n\n        let l = mdBlocks.length;\n        await this.blocksToMarkdown(\n          child_blocks,\n          totalPage,\n          mdBlocks[l - 1].children\n        );\n        continue;\n      }\n      let tmp = await this.blockToMarkdown(block);\n\n      mdBlocks.push({ parent: tmp, children: [] });\n    }\n    return mdBlocks;\n  }\n\n  /**\n   * Converts a Notion Block to a Markdown Block\n   * @param {ListBlockChildrenResponseResult} block - single notion block\n   * @returns {string} corresponding markdown string of the passed block\n   */\n  async blockToMarkdown(block: ListBlockChildrenResponseResult) {\n    if (!(\"type\" in block)) return \"\";\n\n    let parsedData = \"\";\n    const { type } = block;\n    // console.log({ block });\n\n    switch (type) {\n      case \"image\":\n        {\n          let blockContent = block.image;\n          const image_caption_plain = blockContent.caption\n            .map((item) => item.plain_text)\n            .join(\"\");\n          const image_type = blockContent.type;\n          if (image_type === \"external\")\n            return md.image(image_caption_plain, blockContent.external.url);\n          if (image_type === \"file\")\n            return md.image(image_caption_plain, blockContent.file.url);\n        }\n        break;\n\n      case \"divider\": {\n        return md.divider();\n      }\n\n      case \"equation\": {\n        return md.codeBlock(block.equation.expression);\n      }\n\n      case \"video\":\n      case \"file\":\n      case \"pdf\":\n        {\n          let blockContent;\n          if (type === \"video\") blockContent = block.video;\n          if (type === \"file\") blockContent = block.file;\n          if (type === \"pdf\") blockContent = block.pdf;\n          if (blockContent) {\n            const file_type = blockContent.type;\n            if (file_type === \"external\")\n              return md.link(\"image\", blockContent.external.url);\n            if (file_type === \"file\")\n              return md.link(\"image\", blockContent.file.url);\n          }\n        }\n        break;\n\n      case \"bookmark\":\n      case \"embed\":\n      case \"link_preview\":\n        {\n          let blockContent;\n          if (type === \"bookmark\") blockContent = block.bookmark;\n          if (type === \"embed\") blockContent = block.embed;\n          if (type === \"link_preview\") blockContent = block.link_preview;\n          if (blockContent) return md.link(type, blockContent.url);\n        }\n        break;\n\n      case \"table\": {\n        const { id, has_children } = block;\n        let tableArr: string[][] = [];\n        if (has_children) {\n          const tableRows = await getBlockChildren(this.notionClient, id, 100);\n          // console.log(\">>\", tableRows);\n          let rowsPromise = tableRows?.map(async (row) => {\n            const { type } = row as any;\n            const cells = (row as any)[type][\"cells\"];\n\n            /**\n             * this is more like a hack since matching the type text was\n             * difficult. So converting each cell to paragraph type to\n             * reuse the blockToMarkdown function\n             */\n            let cellStringPromise = cells.map(\n              async (cell: any) =>\n                await this.blockToMarkdown({\n                  type: \"paragraph\",\n                  paragraph: { rich_text: cell },\n                } as ListBlockChildrenResponseResult)\n            );\n\n            const cellStringArr = await Promise.all(cellStringPromise);\n            // console.log(\"~~\", cellStringArr);\n            tableArr.push(cellStringArr);\n            // console.log(tableArr);\n          });\n          await Promise.all(rowsPromise || []);\n        }\n        parsedData = md.table(tableArr);\n        return parsedData;\n      }\n\n      // Rest of the types\n      // \"paragraph\"\n      // \"heading_1\"\n      // \"heading_2\"\n      // \"heading_3\"\n      // \"bulleted_list_item\"\n      // \"numbered_list_item\"\n      // \"quote\"\n      // \"to_do\"\n      // \"toggle\"\n      // \"template\"\n      // \"synced_block\"\n      // \"child_page\"\n      // \"child_database\"\n      // \"code\"\n      // \"callout\"\n      // \"breadcrumb\"\n      // \"table_of_contents\"\n      // \"column_list\"\n      // \"column\"\n      // \"link_to_page\"\n      // \"audio\"\n      // \"unsupported\"\n\n      default: {\n        // In this case typescript is not able to index the types properly, hence ignoring the error\n\n        // @ts-ignore\n        let blockContent = block[type].text || block[type].rich_text || [];\n        blockContent.map((content: Text) => {\n          const annotations = content.annotations;\n          let plain_text = content.plain_text;\n\n          plain_text = this.annotatePlainText(plain_text, annotations);\n\n          if (content[\"href\"])\n            plain_text = md.link(plain_text, content[\"href\"]);\n\n          parsedData += plain_text;\n        });\n      }\n    }\n\n    switch (type) {\n      case \"code\":\n        {\n          parsedData = md.codeBlock(parsedData, block[type].language);\n        }\n        break;\n\n      case \"heading_1\":\n        {\n          parsedData = md.heading1(parsedData);\n        }\n        break;\n\n      case \"heading_2\":\n        {\n          parsedData = md.heading2(parsedData);\n        }\n        break;\n\n      case \"heading_3\":\n        {\n          parsedData = md.heading3(parsedData);\n        }\n        break;\n\n      case \"quote\":\n        {\n          parsedData = md.quote(parsedData);\n        }\n        break;\n\n      case \"callout\":\n        {\n          parsedData = md.callout(parsedData, block[type].icon);\n        }\n        break;\n\n      case \"bulleted_list_item\":\n      case \"numbered_list_item\":\n        {\n          parsedData = md.bullet(parsedData);\n        }\n        break;\n\n      case \"to_do\":\n        {\n          parsedData = md.todo(parsedData, block.to_do.checked);\n        }\n        break;\n    }\n\n    return parsedData;\n  }\n\n  /**\n   * Annoate text using provided annotations\n   * @param {string} text - String to be annotated\n   * @param {Annotations} annotations - Annotation object of a notion block\n   * @returns {string} - Annotated text\n   */\n  annotatePlainText(text: string, annotations: Annotations): string {\n    // if text is all spaces, don't annotate\n    if (text.match(/^\\s*$/)) return text;\n\n    const leadingSpaceMatch = text.match(/^(\\s*)/);\n    const trailingSpaceMatch = text.match(/(\\s*)$/);\n\n    const leading_space = leadingSpaceMatch ? leadingSpaceMatch[0] : \"\";\n    const trailing_space = trailingSpaceMatch ? trailingSpaceMatch[0] : \"\";\n\n    text = text.trim();\n\n    if (text !== \"\") {\n      if (annotations.code) text = md.inlineCode(text);\n      if (annotations.bold) text = md.bold(text);\n      if (annotations.italic) text = md.italic(text);\n      if (annotations.strikethrough) text = md.strikethrough(text);\n      if (annotations.underline) text = md.underline(text);\n    }\n\n    return leading_space + text + trailing_space;\n  }\n}\n"]}