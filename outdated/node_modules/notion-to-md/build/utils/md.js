"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.table = exports.tableRowBody = exports.tableRowHeader = exports.divider = exports.addTabSpace = exports.image = exports.todo = exports.bullet = exports.callout = exports.quote = exports.heading3 = exports.heading2 = exports.heading1 = exports.codeBlock = exports.link = exports.underline = exports.strikethrough = exports.italic = exports.bold = exports.inlineCode = void 0;
const inlineCode = (text) => {
    return `\`${text}\``;
};
exports.inlineCode = inlineCode;
const bold = (text) => {
    return `**${text}**`;
};
exports.bold = bold;
const italic = (text) => {
    return `_${text}_`;
};
exports.italic = italic;
const strikethrough = (text) => {
    return `~~${text}~~`;
};
exports.strikethrough = strikethrough;
const underline = (text) => {
    return `<u>${text}</u>`;
};
exports.underline = underline;
const link = (text, href) => {
    return `[${text}](${href})`;
};
exports.link = link;
const codeBlock = (text, language) => {
    return `\`\`\`${language}
${text}
\`\`\``;
};
exports.codeBlock = codeBlock;
const heading1 = (text) => {
    return `# ${text}`;
};
exports.heading1 = heading1;
const heading2 = (text) => {
    return `## ${text}`;
};
exports.heading2 = heading2;
const heading3 = (text) => {
    return `### ${text}`;
};
exports.heading3 = heading3;
const quote = (text) => {
    // the replace is done to handle multiple lines
    return `> ${text.replace(/\n/g, "  \n>")}`;
};
exports.quote = quote;
const callout = (text, icon) => {
    let emoji;
    if ((icon === null || icon === void 0 ? void 0 : icon.type) === 'emoji') {
        emoji = icon.emoji;
    }
    // the replace is done to handle multiple lines
    return `> ${emoji ? emoji + ' ' : ''}${text.replace(/\n/g, "  \n>")}`;
};
exports.callout = callout;
const bullet = (text) => {
    return `- ${text}`;
};
exports.bullet = bullet;
const todo = (text, checked) => {
    return checked ? `- [x] ${text}` : `- [ ] ${text}`;
};
exports.todo = todo;
const image = (alt, href) => {
    return `![${alt}](${href})`;
};
exports.image = image;
const addTabSpace = (text, n = 0) => {
    const tab = "	";
    for (let i = 0; i < n; i++) {
        if (text.includes("\n")) {
            const multiLineText = text.split(/(?<=\n)/).join(tab);
            text = tab + multiLineText;
        }
        else
            text = tab + text;
    }
    return text;
};
exports.addTabSpace = addTabSpace;
const divider = () => {
    return "---";
};
exports.divider = divider;
const tableRowHeader = (row) => {
    let header = row.join("|");
    let divider = row.map((_) => "---").join("|");
    return `${header}\n${divider}`;
};
exports.tableRowHeader = tableRowHeader;
const tableRowBody = (row) => {
    return row.join("|");
};
exports.tableRowBody = tableRowBody;
const table = (cells) => {
    const tableRows = cells.map((row, i) => !i ? (0, exports.tableRowHeader)(row) : (0, exports.tableRowBody)(row));
    return tableRows.join("\n");
};
exports.table = table;
//# sourceMappingURL=md.js.map